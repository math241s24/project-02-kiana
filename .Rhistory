library(sf)
library(tigris)
ca_sf <- counties(state = "CA", cb = TRUE)
fires_sf <- st_as_sf(fires_sf, wkt = "WKT")
ca_sf <- st_as_sf(ca_sf, wkt = "geometry")
st_crs(fires_sf) <- st_crs(ca_sf)
fires_sf <- st_make_valid(fires_sf)
fires_county <- st_intersection(fires_sf, ca_sf)
library(tidyverse)
library(tidycensus)
library(sf)
library(tigris)
ca_sf <- counties(state = "CA", cb = TRUE)
fires_sf <- st_as_sf(fires_sf, wkt = "WKT")
ca_sf <- st_as_sf(ca_sf, wkt = "geometry")
st_crs(fires_sf) <- st_crs(ca_sf)
fires_sf <- st_make_valid(fires_sf)
fires_county <- st_intersection(fires_sf, ca_sf)
fires_county$NAME <- fires_county$NAME
#removing unnecessary columns
fires_county_cleanup <- c("POI_Jurisdictional_UI",
"POI_Protecting_UI",
"reporting_UI",
"fire_discovered_date_estimated_flag",
"fire_control_date_estimated_flag",
"collection_method",
"CREATE_DAT",
"CREATE_BY",
"MODIFY_DAT",
"MODIFY_BY",
"created_us",
"created_da",
"last_edite",
"last_edi_1",
"administrative_state_code",
"complex_name",
"fire_code",
"incident_num",
"irwin_identifier",
"admin_UC",
"uniquie_fireID",
"FIRE_DSCVR",
"FIRE_DSC_1",
"FIRE_DSC_2",
"FIRE_CNTRL",
"FIRE_CNT_1",
"FIRE_CAUSE",
"TOTAL_RPT_",
"CMPLX_NM",
"COUNTYFP",
"COUNTYNS",
"STATEFP",
"IRWIN_ID",
"ADM_UNIT_C",
"ADMIN_ST",
"UNQE_FIRE_",
"STUSPS",
"LSAD",
"STATE_NAME"
)
fires_county <- fires_county %>%
select(-one_of(fires_county_cleanup))
#renaming
fires_county <- fires_county %>%
rename(fire_name = name,
cause = cause_gen,
county_name = NAME,
county_name_full = NAMELSAD
)
View(PAD_CA_sf)
PAD_CA_sf$area <- st_area(PAD_CA_sf)
area_summary <- PAD_CA_sf %>%
group_by(mang_level) %>%
summarise(total_area = sum(area)) %>%
arrange(desc(total_area))  # Optional: Arrange by total_area in descending order
area_summary <- PAD_CA_sf %>%
group_by(mang_level) %>%
summarise(total_area = sum(GIS_Acres)) %>%
arrange(desc(total_area))  # Optional: Arrange by total_area in descending order
area_summary <- PAD_CA %>%
group_by(mang_level) %>%
summarise(total_area = sum(GIS_Acres)) %>%
arrange(desc(total_area))  # Optional: Arrange by total_area in descending order
# Print the summary
print(area_summary)
total_acres <- sum(PAD_CA$GIS_Acres, na.rm = TRUE)
area_summary <- PAD_CA %>%
group_by(mang_level) %>%
summarise(total_area = sum(GIS_Acres),
percentage = (sum(GIS_Acres) / total_acres) * 100) %>%
arrange(desc(total_area))  # Optional: Arrange by total_area in descending order
print(area_summary)
total_acres <- sum(PAD_CA_sf$GIS_Acres, na.rm = TRUE)
area_summary <- PAD_CA_sf %>%
group_by(mang_level) %>%
summarise(total_area = sum(GIS_Acres),
percentage = (sum(GIS_Acres) / total_acres) * 100) %>%
arrange(desc(total_area))  # Optional: Arrange by total_area in descending order
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by mang_level",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set3")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by mang_level",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by mang_level",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set1")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by mang_level",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set4")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by mang_level",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set3")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres of Public Lands by Management Level",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Management Level's Percentage of Total Acres",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
PAD_CA <- PAD_CA %>%
filter(!is.na(WKT)) %>%
filter(mang_level != "Unknown") %>%
filter(mang_level != "Private") %>%
filter(mang_level != "Non-Governmental Organization") %>%
mutate(mang_level = case_when(
mang_level == "Regional Agency Special District" ~ "Local Government",
mang_level == "Joint" ~ "Local Government",
TRUE ~ mang_level
))
total_acres <- sum(PAD_CA$GIS_Acres, na.rm = TRUE)
area_summary <- PAD_CA %>%
group_by(mang_level) %>%
summarise(total_area = sum(GIS_Acres),
percentage = (sum(GIS_Acres) / total_acres) * 100) %>%
arrange(desc(total_area))  # Optional: Arrange by total_area in descending order
print(area_summary)
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres: Management Level",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
PAD_CA <- PAD_CA %>%
filter(mang_level != "Unknown") %>%
filter(mang_level != "Private") %>%
filter(mang_level != "Non-Governmental Organization") %>%
mutate(mang_level = case_when(
mang_level == "Regional Agency Special District" ~ "Local Government",
mang_level == "Joint" ~ "Local Government",
TRUE ~ mang_level
))
total_acres <- sum(PAD_CA$GIS_Acres, na.rm = TRUE)
area_summary <- PAD_CA %>%
group_by(mang_level) %>%
summarise(total_area = sum(GIS_Acres),
percentage = (sum(GIS_Acres) / total_acres) * 100) %>%
arrange(desc(total_area))  # Optional: Arrange by total_area in descending order
print(area_summary)
PAD_CA <- PAD_CA %>%
mutate(mang_level = case_when(
mang_level == "Regional Agency Special District" ~ "Local Government",
mang_level == "Joint" ~ "Local Government",
mang_level == "Private" ~ "Non-Governmental Organization",
mang_level == "Unknown" ~ "Non-Governmental Organization",
TRUE ~ mang_level
))
total_acres <- sum(PAD_CA$GIS_Acres, na.rm = TRUE)
area_summary <- PAD_CA %>%
group_by(mang_level) %>%
summarise(total_area = sum(GIS_Acres),
percentage = (sum(GIS_Acres) / total_acres) * 100) %>%
arrange(desc(total_area))  # Optional: Arrange by total_area in descending order
print(area_summary)
PAD_CA <- PAD_CA %>%
mutate(mang_level = case_when(
mang_level == "Regional Agency Special District" ~ "Local Government",
mang_level == "Joint" ~ "Local Government",
mang_level == "Private" ~ "Non-Governmental Organization",
mang_level == "Unknown" ~ "Non-Governmental Organization",
TRUE ~ mang_level
))
total_acres <- sum(PAD_CA$GIS_Acres, na.rm = TRUE)
PAD_CA <- read_csv("../Data/Original_Data/PAD_CA.csv",
col_types = cols(FeatClass = col_skip(),
Category = col_skip(),
Loc_Own = col_skip(),
Loc_Mang = col_skip(),
Own_Type = col_skip(),
Own_Name = col_skip(),
EHoldTyp = col_skip(),
EsmtHldr = col_skip(),
Comments = col_skip(),
Date_Est = col_skip(),
IUCNCtDt = col_skip(),
IUCN_Cat = col_skip(),
IUCNCtSrc = col_skip(),
Access_Src = col_skip(),
Access_Dt = col_skip(),
Loc_Ds = col_skip(),
Loc_Nm = col_skip(),
Src_Date = col_skip(),
Unit_Nm = col_skip(),
Pub_Access = col_skip(),
GAP_Sts = col_skip(),
GAPCdSrc = col_skip(),
GAPCdDt = col_skip()
))
PAD_CA <- read_csv("../Data/Original_Data/PAD_CA.csv",
col_types = cols(FeatClass = col_skip(),
Category = col_skip(),
Loc_Own = col_skip(),
Loc_Mang = col_skip(),
Own_Type = col_skip(),
Own_Name = col_skip(),
EHoldTyp = col_skip(),
EsmtHldr = col_skip(),
Comments = col_skip(),
Date_Est = col_skip(),
IUCNCtDt = col_skip(),
IUCN_Cat = col_skip(),
IUCNCtSrc = col_skip(),
Access_Src = col_skip(),
Access_Dt = col_skip(),
Loc_Ds = col_skip(),
Loc_Nm = col_skip(),
Src_Date = col_skip(),
Unit_Nm = col_skip(),
Pub_Access = col_skip(),
GAP_Sts = col_skip(),
GAPCdSrc = col_skip(),
GAPCdDt = col_skip()
))
PAD_CA <- read_csv("../Data/Original_Data/PAD_CA.csv",
col_types = cols(FeatClass = col_skip(),
Category = col_skip(),
Loc_Own = col_skip(),
Loc_Mang = col_skip(),
Own_Type = col_skip(),
Own_Name = col_skip(),
EHoldTyp = col_skip(),
EsmtHldr = col_skip(),
Comments = col_skip(),
Date_Est = col_skip(),
IUCNCtDt = col_skip(),
IUCN_Cat = col_skip(),
IUCNCtSrc = col_skip(),
Access_Src = col_skip(),
Access_Dt = col_skip(),
Loc_Ds = col_skip(),
Loc_Nm = col_skip(),
Src_Date = col_skip(),
Unit_Nm = col_skip(),
Pub_Access = col_skip(),
GAP_Sts = col_skip(),
GAPCdSrc = col_skip(),
GAPCdDt = col_skip()
))
library(readr)
PAD_CA <- read_csv("Data/Original_Data/PAD_CA.csv")
View(PAD_CA)
PAD_CA <- PAD_CA %>%
rename(mang_level = Mang_Type,
mang_name = Mang_Name,
designation = Des_Tp
)
PAD_CA <- PAD_CA %>%
mutate(mang_level = case_when(
mang_level == "Regional Agency Special District" ~ "Local Government",
mang_level == "Joint" ~ "Local Government",
mang_level == "Private" ~ "Non-Governmental Organization",
mang_level == "Unknown" ~ "Non-Governmental Organization",
TRUE ~ mang_level
))
total_acres <- sum(PAD_CA$GIS_Acres, na.rm = TRUE)
area_summary <- PAD_CA %>%
group_by(mang_level) %>%
summarise(total_area = sum(GIS_Acres),
percentage = (sum(GIS_Acres) / total_acres) * 100) %>%
arrange(desc(total_area))  # Optional: Arrange by total_area in descending order
print(area_summary)
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres: Management Level",
fill = "mang_level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(aes(label = label), position = position_stack(vjust = 0.5), color = "white", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set3")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_text(aes(label = label), position = position_stack(vjust = 0.5), color = "white", size = 3) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set3")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(aes(label = label), position = position_stack(vjust = 0.5), color = "white", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set3")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), color = "white", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set3")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), color = "white", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), color = "white", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set3")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), color = "white", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.7), color = "white", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), aes(x = 1.2), color = "white", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), aes(x = 1.5), color = "white", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), aes(x = 1.7), color = "black", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), aes(x = 1.6), color = "black", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), aes(x = 1.55), color = "black", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "Management Level") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
ggplot(area_summary, aes(x = "", y = percentage, fill = mang_level, label = paste0(round(percentage), "%"))) +
geom_bar(stat = "identity", width = 1) +
geom_text(position = position_stack(vjust = 0.5), aes(x = 1.55), color = "black", size = 3) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Total Acres by Management Level",
fill = "") +
theme_void() +
theme(legend.position = "bottom") +
scale_fill_brewer(palette = "Set2")
View(ca_sf)
fire_counts_mangnm_yr <- fire_manage %>%
group_by(mang_name, discover_yr) %>%
summarize(fire_count = n()) %>%
mutate(percentage = (fire_count / sum(fire_count)) * 100)
fire_counts_manglvl_yr <- fire_manage %>%
group_by(mang_level, discover_yr) %>%
summarize(fire_count = n()) %>%
mutate(percentage = (fire_count / sum(fire_count)) * 100)
fire_counts_manglvl <- fire_manage %>%
group_by(mang_level) %>%
summarize(fire_count = n()) %>%
mutate(percentage = (fire_count / sum(fire_count)) * 100)
#74.3% of fires occurred on Federal Land, 510 fires
#17.4% of fires occurred on State Land, 120 fires
#nothing else of real importance
#and this is from 1984 - 2020 ...
ggplot(fire_counts_manglvl_yr, aes(x = discover_yr, y = fire_count, color = mang_level)) +
geom_line() +
labs(title = "CA Wildfires Over Time Across Land Management Level",
x = "Year Discovered",
y = "Number of Fires",
color = "Land Management")
View(fire_counts_manglvl)
#animated plot of wildfires each year with fires_counties and adding county boundaries
combined_plot <- ggplot() +
geom_sf(data = ca_sf, aes(fill = NAME)) +
labs(fill = "County") +
theme_void()
combined_plot + transition_states(fires_sf$discover_yr, transition_length = 1, state_length = 1)
library(countdown)
library(gt)
library(readxl)
library(gganimate)
library(gifski)
library(knitr)
library(kableExtra)
library(transformr)
fires_sf$discover_yr <- factor(fires_sf$discover_yr)
#Animated plot of fires_sf without any boundaries
fires_sf_byyear <- ggplot() +
geom_sf(data = fires_sf, aes(fill = factor(discover_yr))) +
labs(fill = "Year") +
theme_void()
fires_sf_byyear + transition_states(discover_yr, transition_length = 1, state_length = 1)
